apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sdenyname3v3
spec:
  crd:
    spec:
      names:
        kind: K8sDenyName3v3
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sdenynames3
        violation[{"msg": msg}] {
          input.review.object.metadata.name == input.parameters.invalidName
          msg := sprintf("The name %v is not allowed", [input.parameters.invalidName])
        }
        
---
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sDenyName3v3
metadata:
  name: no-gke-system
spec:
  match:
    namespaces: 
      - default
  parameters:
    invalidName: "gke-system"
---
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sdenyname2v3
spec:
  crd:
    spec:
      names:
        kind: K8sDenyName2v3
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sdenynames2
        violation[{"msg": msg}] {
          input.review.object.metadata.name == input.parameters.invalidName
          msg := sprintf("The name %v is not allowed", [input.parameters.invalidName])
        }
---
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sDenyName2v3
metadata:
  name: no-gke-system
spec:
  match:
    namespaces: 
      - default
  parameters:
    invalidName: "gke-system"
---
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sDenyName1v3
metadata:
  name: no-gke-system
spec:
  match:
    namespaces: 
      - default
  parameters:
    invalidName: "gke-system"
---
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sDenyName1v3
metadata:
  name: no-gke-system
spec:
  match:
    namespaces: 
      - default
  parameters:
    invalidName: "gke-system"
---
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sdenyname1v3
spec:
  crd:
    spec:
      names:
        kind: K8sDenyName1v3
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sdenynames1
        violation[{"msg": msg}] {
          input.review.object.metadata.name == input.parameters.invalidName
          msg := sprintf("The name %v is not allowed", [input.parameters.invalidName])
        }
